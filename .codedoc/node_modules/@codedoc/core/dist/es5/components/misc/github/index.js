"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !exports.hasOwnProperty(p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GithubButton = void 0;
var types_1 = require("./types");
var defaults_1 = require("./defaults");
function schemeString(options) {
    return "no-preference: " + (options.color === 'Dark' ? 'dark' : 'light') + ";" +
        (" light: " + (options.colorLight === 'Dark' ? 'dark' : 'light') + ";") +
        (" dark: " + (options.colorDark === 'Light' ? 'light' : 'dark') + ";");
}
function isTrue(val) { return val === true || val === 'true'; }
function GithubButton(options, renderer) {
    var _defaults = defaults_1.defaults(options);
    return renderer.create("fragment", null,
        renderer.create("script", { async: true, defer: true, src: "https://buttons.github.io/buttons.js" }),
        renderer.create("a", { class: "github-button", "data-color-scheme": schemeString(options), "data-icon": isTrue(options.standardIcon) ? false : (options.icon || _defaults.icon || false), "data-show-count": types_1.isCountable(options) ? (isTrue(options.count) ? 'true' : false) : false, "data-size": isTrue(options.large) ? 'large' : false, href: options.link || _defaults.link }, options.label || _defaults.label));
}
exports.GithubButton = GithubButton;
__exportStar(require("./types"), exports);
__exportStar(require("./search"), exports);
//# sourceMappingURL=index.js.map